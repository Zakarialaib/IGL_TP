import org.junit.Test;
import java.lang.AssertionError;

import java.util.ArrayList;

import static org.junit.Assert.*;

public class VectorHelperTest {
    String sh=new String("le teste est negative ");
    String sh1=new String("le teste est positive ");
    @Test
    public void trie() throws Exception {
        boolean check = true;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(1);
        s.add(0);
        s.add(-5);
        ArrayList<Integer> s1 = new ArrayList<Integer>();
        s1.add(-5);
        s1.add(0);
        s1.add(1);
        VectorHelper V = new VectorHelper(s);
        VectorHelper V1 = new VectorHelper(s1);
        V.Trie();
        for(int i=0 ; i<V.VectSize(); i++)
        {
            if (V.getElemnt(i)!=V1.getElemnt(i)) check=false;
        }
        if (check) {
            System.out.println("trie :"+sh);
        }
        else System.out.println("trie :"+sh1);

    }

    @Test
    public void vectInverser() throws Exception {
        boolean check =true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        ArrayList<Integer> s1 = new ArrayList<Integer>();
        s1.add(-5);
        s1.add(1);
        s1.add(0);
        VectorHelper V = new VectorHelper(s);
        VectorHelper V1 = new VectorHelper(s1);
        V.VectInverser();
        for(int i=0 ; i<V.VectSize(); i++)
        {
            if (V.getElemnt(i)!=V1.getElemnt(i)) check=false;
        }
        if (check) {
            System.out.println("inverser :"+sh);
        }
        else System.out.println("inverser :"+sh1);
    }

    @Test
    public void vectMax() throws Exception {
        boolean check=true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        VectorHelper V = new VectorHelper(s);
        if(V.VectMax()!=1) check=false;
        if (check) {
            System.out.println("max :"+sh);
        }
        else System.out.println("max :"+sh1);
    }


    @Test
    public void vectMin() throws Exception {
        boolean check=true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        VectorHelper V = new VectorHelper(s);
        if(V.VectMin()!=-5) check=false;
        if (check) {
            System.out.println("min :"+sh);
        }
        else System.out.println("min :"+sh1);

    }

    @Test
    public void vectMultiplication() throws Exception {
        boolean check = true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        ArrayList<Integer> s1 = new ArrayList<Integer>();
        s1.add(0);
        s1.add(2);
        s1.add(-10);
        VectorHelper V = new VectorHelper(s);
        VectorHelper V1 = new VectorHelper(s1);
        V.VectMultiplication(2);
        for(int i=0 ; i<V.VectSize(); i++)
        {
            if (V.getElemnt(i)!=V1.getElemnt(i)) check=false;
        }
        if (check) {
            System.out.println("multiplication :"+sh);
        }
        else System.out.println("multiplication :"+sh1);



    }

    @Test
    public void vectDevision() throws Exception {
        boolean check = true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        ArrayList<Integer> s1 = new ArrayList<Integer>();
        s1.add(0/2);
        s1.add(1/2);
        s1.add(-5/2);
        VectorHelper V = new VectorHelper(s);
        VectorHelper V1 = new VectorHelper(s1);
        V.VectDevision(2);
        for(int i=0 ; i<V.VectSize(); i++)
        {
            if (V.getElemnt(i)!=V1.getElemnt(i)) check=false;
        }
        if (check) {
            System.out.println("division :"+sh);
        }
        else System.out.println("division :"+sh1);
    }

    @Test
    public void vectAddition() throws Exception {
        boolean check = true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        ArrayList<Integer> s1 = new ArrayList<Integer>();
        s1.add(0+2);
        s1.add(1+2);
        s1.add(-5+2);
        VectorHelper V = new VectorHelper(s);
        VectorHelper V1 = new VectorHelper(s1);
        V.VectAddition(2);
        for(int i=0 ; i<V.VectSize(); i++)
        {
            if (V.getElemnt(i)!=V1.getElemnt(i)) check=false;
        }
        if (check) {
            System.out.println("addition :"+sh);
        }
        else System.out.println("addition :"+sh1);
    }

    @Test
    public void vectSoustraction() throws Exception {
        boolean check = true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        ArrayList<Integer> s1 = new ArrayList<Integer>();
        s1.add(0-2);
        s1.add(1-2);
        s1.add(-5-2);
        VectorHelper V = new VectorHelper(s);
        VectorHelper V1 = new VectorHelper(s1);
        V.VectSoustraction(2);
        for(int i=0 ; i<V.VectSize(); i++)
        {
            if (V.getElemnt(i)!=V1.getElemnt(i)) check=false;
        }
        if (check) {
            System.out.println("soustraction :"+sh);
        }
        else System.out.println("soustraction :"+sh1);
    }

    @Test
    public void somme() throws Exception {
        boolean check = true ;
        ArrayList<Integer> s = new ArrayList<Integer>();
        s.add(0);
        s.add(1);
        s.add(-5);
        ArrayList<Integer> s1 = new ArrayList<Integer>();
        s1.add(1);
        s1.add(1);
        s1.add(1);
        ArrayList<Integer> s2 = new ArrayList<Integer>();
        s2.add(1);
        s2.add(2);
        s2.add(-4);
        VectorHelper V = new VectorHelper(s);
        VectorHelper V1 = new VectorHelper(s1);
        VectorHelper V2 = new VectorHelper(s2);
        V.Somme(V1);
        for(int i=0 ; i<V.VectSize(); i++)
        {
            if (V.getElemnt(i)!=V2.getElemnt(i)) check=false;
        }
        assertFalse("le teste pour addition de deux vecteur est positive ",check);
        assertTrue("le teste pour addition de deux vecteur est negative ",check);
    }
}
